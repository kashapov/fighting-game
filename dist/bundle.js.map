{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/scripts/game.js","webpack:///./assets/scripts/monster.js","webpack:///./assets/scripts/player.js","webpack:///./assets/scripts/score.js","webpack:///./assets/scripts/spell.js","webpack:///./assets/scripts/task.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS,EAAE;;AAEX;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,a;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,a;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qB;;;;;;;;;;;;;;AChLA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;;;AAIA,C;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA,C;;;;;;;;;;;;;;ACpDA;;;AAGA,C;;;;;;;;;;;;;;;ACHA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,C;;;;;;;;;;;;;;ACXA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,+D;AACA,wH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./assets/scripts/game.js\");\n","import Player from \"./player.js\";\nimport Monster from \"./monster.js\";\nimport Score from \"./score.js\";\nimport Spell from \"./spell.js\";\nimport Task from \"./task.js\";\n\n\nclass Game {\n    constructor() {\n        this.player = new Player();\n        this.monster = new Monster();\n        this.score = new Score();\n        this.spell = new Spell();\n        this.task = new Task();\n        \n        this.roundCounter = 0;\n        this.spellType = \"\";\n\n        this.audio = new Audio();\n    }\n\n    startGame() {\n        this.playingSection = document.getElementById('playingSection');\n        this.loginPage = document.getElementById('loginPage');\n\n        this.loginPage.style.display = \"none\";\n        this.playingSection.style.display = \"block\";\n        this.player.render();\n        this.newRound();\n    }\n\n    createSounds() {\n        this.audio.preload = \"auto\";\n        this.audio.volume = 1;\n        this.audio.src = \"./assets/audio/Intro.mp3\";\n      }\n\n    createGame() {\n\n        //alert(1);\n        //this.createSounds();\n        //this.audio.play();\n\n        this.btnToGame = document.querySelector('#btnToGame');\n        this.btnToAbout = document.querySelector('#btnToAbout');\n        this.menuGame = document.querySelector('#menuGame');\n        this.checkinBlock = document.querySelector('#checkinBlock');\n        this.loginForm = document.getElementById('loginForm');\n        this.inputName = document.getElementById('inputName');\n        this.btnChooseSpell = document.getElementById('btnChooseSpell');\n        this.spellModalWindow = document.getElementById('spellModalWindow');\n        this.btnAttack = document.getElementById('btnAttack');\n        this.btnHealing = document.getElementById('btnHealing');\n        this.taskInput = document.getElementById('taskInput');\n        this.taskForm = document.getElementById('taskForm');\n\n        btnToGame.addEventListener('click', () => {\n            this.menuGame.style.display = \"none\";\n            this.checkinBlock.style.display = \"block\";\n        });\n\n        btnToAbout.addEventListener('click', () => {\n            window.location.href = \"about.html\";\n        });\n\n        /*btnToIndex.addEventListener('click', () => {\n            window.location.href = \"../views/index.html\";\n        });*/\n\n        this.loginForm.addEventListener('submit', () => {\n            if (this.inputName.value != \"\") {\n                this.startGame();\n            };\n            event.preventDefault();\n        });\n\n        this.btnChooseSpell.addEventListener('click', () => {\n            this.spell.spellRender();\n        });\n\n        this.btnAttack.addEventListener('click', () => {\n            this.spellModalWindow.style.display = \"none\";\n            this.spellType = \"attack\";\n            this.task.arithmeticTask();\n        });\n\n        this.btnHealing.addEventListener('click', () => {\n            this.spellModalWindow.style.display = \"none\";\n            this.spellType = \"health\";\n            this.task.arithmeticTask();\n        });\n\n        this.taskForm.addEventListener('submit', () => {\n            if (this.taskInput.value !== \"\") {\n                this.taskCheck();\n            }\n            event.preventDefault();\n        });\n    }\n\n    \n\n    getRandom(arr) {\n        var index = Math.floor(Math.random() * arr.length);\n        return arr[index];\n    }\n\n    newRound() {\n        this.roundNumber = document.getElementById('roundNumber');\n\n        this.roundCounter += 1;\n        this.monster.healthPoints = 100;\n        this.monster.healthPointsLine = 100;\n        this.monster.hpGreenLine.style.width = '100%';\n        this.roundNumber.innerHTML = 'Round #' + this.roundCounter;\n        this.monsterBody =  this.getRandom(this.monster.monsterBodys);\n        this.monsterName = this.getRandom(this.monster.monsterNames[0]) +' '+ this.getRandom(this.monster.monsterNames[1]) +' '+ this.getRandom(this.monster.monsterNames[2]);\n\n        this.monster.render(this.monsterBody, this.monsterName);\n    }\n\n    taskCheck() {\n        this.taskResult = this.task.getTaskResult();\n        this.taskInput = document.getElementById('taskInput');\n        this.taskWindow = document.getElementById('taskModalWindow');\n\n        if(this.spellType === \"attack\") {\n            if (this.taskInput.value == this.taskResult) {\n                this.taskWindow.style.display = \"none\";\n                this.player.attack();\n                setTimeout(() => {\n                    this.monster.healthDecrease();\n                    this.healthCheck();\n                }, 1000);\n            } else {\n                this.taskWindow.style.display = \"none\";\n                this.monster.attack();\n                setTimeout(() => {\n                    this.player.healthDecrease();\n                    this.healthCheck();\n                }, 1000);\n            }    \n        } else if (this.spellType === \"health\") {\n            if (this.taskInput.value == this.taskResult) {\n                this.taskWindow.style.display = \"none\";\n                setTimeout(() => {\n                    this.player.healthIncrease();\n                }, 1000);\n            } else {\n                this.taskWindow.style.display = \"none\";\n                setTimeout(() => {\n                    this.monster.healthIncrease();\n                }, 1000);\n            }    \n        }\n       \n        this.taskInput.value = \"\";\n    }\n\n    healthCheck() {\n        if (this.monster.healthPoints === 0) {\n            this.newRound();\n            \n        } else if (this.player.healthPoints === 0) {\n            this.showScorePage();\n        }\n    }\n\n    showScorePage() {\n        \n    }\n\n}\n\nlet newGame = new Game();\n\nnewGame.createGame();","export default class Monster {\n    constructor() {\n        this.monsterNames = [\n            ['Ужасный', 'Злобный', 'Сопливый'],\n            ['Джидай', 'Наемник', 'Клон'],\n            ['Люк', 'Йода', 'Оби-Ван']\n        ];\n\n        this.monsterBodys = ['body1', 'body2', 'body3'];\n        this.healthPoints = 0;\n        this.healthPointsLine = 0;\n\n        this.hpGreenLine = document.getElementById('monsterHpGreenLine');\n    }\n\n    render(body, name) {\n        this.monsterName = document.getElementById('monsterName');\n        this.healthPointsBlock = document.getElementById('monsterHealthPoints');\n        this.monsterBlock = document.getElementById('monsterBlock');\n\n        this.name = name;\n        this.monsterBody = body;\n        this.monsterName.innerHTML = name;\n        this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n\n        if (this.healthPoints === 100) {\n            this.hpGreenLine.classList.add('health-render');\n        }\n\n        this.monsterBlock.classList.remove('monster-attack');\n        this.monsterBlock.classList.add('spriteMonsterIdle');\n    }\n\n    healthDecrease() {\n        this.healthPointsBlock = document.getElementById('monsterHealthPoints');\n\n        this.healthPoints -= 25;\n        this.healthPointsLine -= 25;\n        this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n        this.hpGreenLine.style.width = this.healthPointsLine + '%';\n    }\n\n    healthIncrease() {\n        this.healthPointsBlock = document.getElementById('monsterHealthPoints');\n\n        this.healthPoints += 25;\n        this.healthPointsLine += 25;\n        this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n        this.hpGreenLine.style.width = this.healthPointsLine + '%';\n    }\n\n    attack() {\n        this.monsterBlock.classList.remove('monster-stay');\n        this.monsterBlock.classList.add('monster-attack');\n        setTimeout(() => {\n            this.render(this.monsterBody, this.name);\n        }, 1000)\n    }\n\n    death() {\n\n    }\n\n    \n\n}","export default class Player {\n  constructor() {\n    this.healthPoints = 100;\n    this.healthPointsLine = 100;\n  }\n\n  render() {\n    this.inputName = document.getElementById('inputName');\n    this.playerName = document.getElementById('playerName');\n    this.playerBlock = document.getElementById('playerBlock');\n    this.healthPointsBlock = document.getElementById('playerHP');\n    this.hpGreenLine = document.getElementById('playerHpLineGreen');\n\n    this.playerName.innerHTML = 'Darth ' + this.inputName.value;\n    this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n    this.hpGreenLine.classList.add('health-render');\n    this.playerBlock.classList.remove('player-attack');\n    this.playerBlock.classList.add('spritePlayerIdle');\n  }\n\n  healthDecrease() {\n    this.healthPointsBlock = document.getElementById('playerHP');\n    this.hpGreenLine = document.getElementById('playerHpLineGreen');\n\n    this.healthPoints -= 25;\n    this.healthPointsLine -= 25;\n    this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n    this.hpGreenLine.style.width = this.healthPointsLine + '%';\n  }\n\n  healthIncrease() {\n    this.hpGreenLine = document.getElementById('playerHpLineGreen');\n\n    this.healthPoints += 25;\n    this.healthPointsLine += 25;\n    this.healthPointsBlock.innerHTML = this.healthPoints + '/100 HP';\n    this.hpGreenLine.style.width = this.healthPointsLine + '%';\n  }\n\n  attack() {\n    this.playerBlock = document.getElementById('playerBlock');\n\n    this.playerBlock.classList.remove('player-stay');\n    this.playerBlock.classList.add('player-attack');\n    setTimeout(() => {\n      this.render();\n    }, 1000)\n  }\n\n  death() {\n\n  }\n}","export default class Score {\n    \n\n}","import Task from \"./task\";\n\nexport default class Spell {\n    constructor() {\n        this.spellModalWindow = document.getElementById('spellModalWindow');\n    }\n\n    spellRender() {\n        this.spellModalWindow.style.display = \"block\";\n    }\n\n}","export default class Task {\n    constructor() {\n        this.mathOperators = ['+', '-', '*'];\n\n        this.taskWindow = document.getElementById('taskModalWindow');\n        this.task = document.getElementById('taskText');\n        \n    }\n\n    arithmeticTask() {\n        this.taskWindow.style.display = \"block\";\n       \n        this.mathOperator = this.getRandom(this.mathOperators);        \n        this.taskExpression = this.getRandomFromTo(1, 10) + \" \" + this.mathOperator + \" \" + this.getRandomFromTo(1, 10);        \n        this.task.innerHTML = this.taskExpression + ' = ';\n    }\n\n    getRandom(arr) {\n        var index = Math.floor(Math.random() * arr.length);\n        return arr[index];\n    }\n\n    getRandomFromTo(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;;\n    }\n\n    getTaskResult() {\n        this.taskResult = eval(this.taskExpression);\n        return this.taskResult;\n    }\n\n}"],"sourceRoot":""}